react = as.matrix(read.table("bistable.tab")[,-1])
wt = react[1,]
wt = ((1 + tanh((wt - median(wt))^2))/4)
plot_dat = data.frame(index = 1:length(wt), wt = wt)
p = ggplot(data = plot_dat, aes(x = index, y = wt)) + geom_bar(stat = "identity") +
xlab("Nucleotide Index")+
ylab("Normalized Reactivity") +
ggtitle("Experimental Pair Probabilities") +
theme_bw() +
theme(
panel.border = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
library(ggplot)
library(ggplot2)
p = ggplot(data = plot_dat, aes(x = index, y = wt)) + geom_bar(stat = "identity") +
xlab("Nucleotide Index")+
ylab("Normalized Reactivity") +
ggtitle("Experimental Pair Probabilities") +
theme_bw() +
theme(
panel.border = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
p
wt
hist(wt)
hist(react)
hist(react^2)
reacts
react
wt
hist(react)
ract
react < 0
react
cldata = read.csv("clusterPlotData.csv")
cldata
head(cldata)
class(cldata$value)
unique(cldata$variable)
ddply(cldata, .(variable), function(df) { return(df$value > .5)})
library(plyr)
ddply(cldata, .(variable), function(df) { return(df$value > .5)})
ddply(cldata, .(variable), function(df) { return(df$value > .5)}) -> predicted
predicted[1,-1] %*% predicted[2,-1]
predicted[1,]
class(predicted[,-1])
class(predicted[1,-1])
TRUE * 0
TRUE * 1
TRUE *2
FALSE * 2
clusterPlotData = read.csv("clusterPlotData.csv")
predicted = ddply(clusterPlotData, .(variable), function(df) return(df$value > .5))
library(ggplot2)
library(plyr)
library(ggthemes)
head(predicted)
nCl1 = as.numeric(predicted[1,-1])
nCl1
predicted[,1]
nCl1 = as.numeric(predicted[1,-1])
nCl2 = as.numeric(predicted[2,-1])
rCl1 = as.numeric(predicted[3,-1])
rCl2 = as.numeric(predicted[4,-1])
nCl1 %*% rCL1
nCl1 %*% rCl1
nCl1 %*% rCl1 / length(rCl1)
nCl1 %*% rCl2 / length(rCl1)
nCl2 %*% rCl2 / length(rCl1)
nCl1 %*% rCl1 / length(rCl1)
nCl1 %*% rCl2 / length(rCl1)
nCl2 %*% rCl2 / length(rCl1)
nCl2 %*% rCl1 / length(rCl1)
predicted = ddply(clusterPlotData, .(variable), function(df) return(df$value > .3))
nCl1 = as.numeric(predicted[1,-1])
nCl2 = as.numeric(predicted[2,-1])
rCl1 = as.numeric(predicted[3,-1])
rCl2 = as.numeric(predicted[4,-1])
nCl1 %*% rCl1 / length(rCl1)
nCl1 %*% rCl2 / length(rCl1)
nCl2 %*% rCl2 / length(rCl1)
nCl2 %*% rCl1 / length(rCl1)
predicted = ddply(clusterPlotData, .(variable), function(df) return(df$value > .2))
nCl1 = as.numeric(predicted[1,-1])
nCl2 = as.numeric(predicted[2,-1])
rCl1 = as.numeric(predicted[3,-1])
rCl2 = as.numeric(predicted[4,-1])
nCl1 %*% rCl1 / length(rCl1)
nCl1 %*% rCl2 / length(rCl1)
nCl2 %*% rCl2 / length(rCl1)
nCl2 %*% rCl1 / length(rCl1)
head(clusterPlotData)
comp1 = susbset(clusterPlotData, variable %in% c("rCl1", "nCl1"))
comp1 = subset(clusterPlotData, variable %in% c("rCl1", "nCl1"))
comp1
p1 = ggplot(clusterPlotData, aes(x=index, y = value, color = variable)) + geom_bar()
p1
p1 = ggplot(clusterPlotData, aes(x=index, y = value, color = variable)) + geom_bar(stat="identity")
p1
p1 = ggplot(comp1, aes(x=index, y = value, fill = variable)) + geom_bar(stat="identity")
p1
p1 = ggplot(comp1, aes(x=index, y = value, fill = variable)) + geom_bar(stat="identity", alpha = .8)
p1
clusterPlotData
comp1
p1 = ggplot(comp1, aes(x=index, y = value, fill = variable)) + geom_bar(stat="identity",position="dodge")
p1
p1 + theme_bw()
ggsave("NestorReactitiyPlot1.eps")
comp2 = subset(clusterPlotData, variable %in% c("rCl2", "nCl2"))
p2 = ggplot(comp2, aes(x=index, y = value, fill = variable)) + geom_bar(stat="identity",position="dodge")
p2 + theme_bw()
ggsave("NestorReactitiyPlot12.eps")
